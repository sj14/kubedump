apiVersion: v1
kind: Namespace
metadata:
  name: kubedump
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kubedump
  name: kubedump
  namespace: kubedump
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubedump
rules: # limit the groups/resources according to your (security) needs
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedump
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubedump
subjects:
  - kind: ServiceAccount
    name: kubedump
    namespace: kubedump
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubedump-config
  namespace: kubedump
data:
  # adjust settings as desired
  CONFIG: "" # empty -> in-cluster config
  DIR: "/dump"
  VERBOSITY: "3"
  IGNORE_NAMESPACES: kube-system,kube-public,kube-node-lease
  IGNORE_RESOURCES: events
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kubedump
  namespace: kubedump
spec:
  schedule: "@daily"
  concurrencyPolicy: Replace
  jobTemplate:
    metadata:
      name: kubedump
      namespace: kubedump
    spec:
      template:
        spec:
          serviceAccountName: kubedump
          initContainers:
            - image: ghcr.io/sj14/kubedump:latest # pin a fixed version
              name: kubedump
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "100m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
              envFrom:
                - configMapRef:
                    name: kubedump-config
              volumeMounts:
                - mountPath: /dump
                  name: dump-volume
          containers:
            - image: alpine # adjust the container with something you want to do, e.g. backup to s3
              name: alpine
              command:
                - sleep
                - infinity
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "100m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
              volumeMounts:
                - mountPath: /dump
                  name: dump-volume
          restartPolicy: OnFailure
          volumes:
            - name: dump-volume
              emptyDir:
                sizeLimit: 500Mi
